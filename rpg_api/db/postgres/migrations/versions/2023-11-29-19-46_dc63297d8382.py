"""Indexes and constraints - also minor fixes

Revision ID: dc63297d8382
Revises: d675992d78fa
Create Date: 2023-11-29 19:46:56.626967

"""
import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "dc63297d8382"
down_revision = "d675992d78fa"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("character_attributes")
    op.create_index("idx_ability_name", "ability", ["name"], unique=False)
    op.create_index("idx_ability_type_id", "ability", ["ability_type_id"], unique=False)
    op.create_unique_constraint(None, "ability", ["name"])
    op.drop_constraint("ability_ability_type_id_fkey", "ability", type_="foreignkey")
    op.create_foreign_key(
        None, "ability", "ability_type", ["ability_type_id"], ["id"], ondelete="CASCADE"
    )
    op.create_index("idx_ability_type_name", "ability_type", ["name"], unique=False)
    op.create_unique_constraint(None, "ability_type", ["name"])
    op.create_index("idx_attribute_name", "attribute", ["name"], unique=False)
    op.create_unique_constraint(None, "attribute", ["name"])
    op.create_index("idx_base_class_name", "base_class", ["name"], unique=False)
    op.create_unique_constraint(None, "base_class", ["name"])
    op.create_index("idx_base_user_email", "base_user", ["email"], unique=False)
    op.create_index("idx_base_user_status", "base_user", ["status"], unique=False)
    op.drop_column("base_user", "phone")
    op.drop_column("base_user", "first_name")
    op.drop_column("base_user", "last_name")
    op.create_index("idx_character_level", "character", ["level"], unique=False)
    op.create_index("idx_character_name", "character", ["character_name"], unique=False)
    op.create_unique_constraint(None, "character", ["character_name"])
    op.create_index(
        "idx_class_ability_ability_id", "class_ability", ["ability_id"], unique=False
    )
    op.create_index(
        "idx_class_ability_base_class_id",
        "class_ability",
        ["base_class_id"],
        unique=False,
    )
    op.drop_constraint(
        "class_ability_ability_id_fkey", "class_ability", type_="foreignkey"
    )
    op.drop_constraint(
        "class_ability_base_class_id_fkey", "class_ability", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "class_ability", "ability", ["ability_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None,
        "class_ability",
        "base_class",
        ["base_class_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.create_index("idx_place_name", "place", ["name"], unique=False)
    op.create_unique_constraint(None, "place", ["name"])
    op.create_unique_constraint(
        "uq_relation_user1_user2", "relation", ["user1_id", "user2_id"]
    )
    op.drop_constraint("relation_user2_id_fkey", "relation", type_="foreignkey")
    op.drop_constraint("relation_user1_id_fkey", "relation", type_="foreignkey")
    op.create_foreign_key(
        None, "relation", "base_user", ["user1_id"], ["id"], ondelete="CASCADE"
    )
    op.create_foreign_key(
        None, "relation", "base_user", ["user2_id"], ["id"], ondelete="CASCADE"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "relation", type_="foreignkey")
    op.drop_constraint(None, "relation", type_="foreignkey")
    op.create_foreign_key(
        "relation_user1_id_fkey", "relation", "base_user", ["user1_id"], ["id"]
    )
    op.create_foreign_key(
        "relation_user2_id_fkey", "relation", "base_user", ["user2_id"], ["id"]
    )
    op.drop_constraint("uq_relation_user1_user2", "relation", type_="unique")
    op.drop_constraint(None, "place", type_="unique")
    op.drop_index("idx_place_name", table_name="place")
    op.drop_constraint(None, "class_ability", type_="foreignkey")
    op.drop_constraint(None, "class_ability", type_="foreignkey")
    op.create_foreign_key(
        "class_ability_base_class_id_fkey",
        "class_ability",
        "base_class",
        ["base_class_id"],
        ["id"],
    )
    op.create_foreign_key(
        "class_ability_ability_id_fkey",
        "class_ability",
        "ability",
        ["ability_id"],
        ["id"],
    )
    op.drop_index("idx_class_ability_base_class_id", table_name="class_ability")
    op.drop_index("idx_class_ability_ability_id", table_name="class_ability")
    op.drop_constraint(None, "character", type_="unique")
    op.drop_index("idx_character_name", table_name="character")
    op.drop_index("idx_character_level", table_name="character")
    op.add_column(
        "base_user",
        sa.Column(
            "last_name", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "base_user",
        sa.Column(
            "first_name", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "base_user",
        sa.Column("phone", sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    )
    op.drop_index("idx_base_user_status", table_name="base_user")
    op.drop_index("idx_base_user_email", table_name="base_user")
    op.drop_constraint(None, "base_class", type_="unique")
    op.drop_index("idx_base_class_name", table_name="base_class")
    op.drop_constraint(None, "attribute", type_="unique")
    op.drop_index("idx_attribute_name", table_name="attribute")
    op.drop_constraint(None, "ability_type", type_="unique")
    op.drop_index("idx_ability_type_name", table_name="ability_type")
    op.drop_constraint(None, "ability", type_="foreignkey")
    op.create_foreign_key(
        "ability_ability_type_id_fkey",
        "ability",
        "ability_type",
        ["ability_type_id"],
        ["id"],
    )
    op.drop_constraint(None, "ability", type_="unique")
    op.drop_index("idx_ability_type_id", table_name="ability")
    op.drop_index("idx_ability_name", table_name="ability")
    op.create_table(
        "character_attributes",
        sa.Column("character_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("attribute_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("value", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["attribute_id"],
            ["attribute.id"],
            name="character_attributes_attribute_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["character_id"],
            ["character.id"],
            name="character_attributes_character_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="character_attributes_pkey"),
    )
    # ### end Alembic commands ###
