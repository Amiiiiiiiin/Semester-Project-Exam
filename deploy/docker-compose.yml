version: '3.9'

services:
  api:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
      target: prod
    image: rpg_api:${RPG_API_VERSION:-latest}
    restart: always
    env_file:
    - .env
    depends_on:
      mongo:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RPG_API_HOST: 0.0.0.0
      RPG_API_PG_HOST: rpg_api-pg
      RPG_API_PG_PORT: 5432
      RPG_API_PG_USER: rpg_api
      RPG_API_PG_PASS: rpg_api
      RPG_API_PG_BASE: rpg_api
      # RPG_API_MONGO_HOST: mongo
      # RPG_API_MONGO_PORT: 27017
      # RPG_API_MONGO_DATABASE: rpg_api
      # RPG_API_MONGO_USER: rpg_api
      # RPG_API_MONGO_PASS: rpg_api

  postgres:
    image: postgres:13.8-bullseye
    hostname: rpg_api-pg
    ports:
      - "5435:5432"
    environment:
      POSTGRES_PASSWORD: "rpg_api"
      POSTGRES_USER: "rpg_api"
      POSTGRES_DB: "rpg_api"
    volumes:
    - pg-data:/var/lib/postgresql/data
    - ./db-scripts:/docker-entrypoint-initdb.d
    restart: always
    healthcheck:
      test: pg_isready -U rpg_api
      interval: 2s
      timeout: 3s
      retries: 40

  postgres-migrator:
    image: rpg_api:latest
    restart: "no"
    command: alembic upgrade head
    environment:
      RPG_API_PG_HOST: rpg_api-pg
      RPG_API_PG_PORT: 5432
      RPG_API_PG_USER: rpg_api
      RPG_API_PG_PASS: rpg_api
      RPG_API_PG_BASE: rpg_api
    depends_on:
      postgres:
        condition: service_healthy
        
  mongo:
    image: mongo:latest
    hostname: mongo
    container_name: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: rpg_api
      MONGO_INITDB_ROOT_USERNAME: rpg_api
      MONGO_INITDB_ROOT_PASSWORD: rpg_api
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 2s
      timeout: 3s
      retries: 40
    command: --quiet
    restart: always


volumes:
  pg-data:
  mongo-data:
