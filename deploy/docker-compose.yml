version: '3.9'

services:

  api:
    build:
      context: .
      dockerfile: ./deploy/Dockerfile
      target: prod
    image: rpg_api:${RPG_API_VERSION:-latest}
    restart: always
    env_file:
    - .env
    depends_on:
      mongo:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      RPG_API_HOST: 0.0.0.0
      RPG_API_DB_HOST: rpg_api-pg
      RPG_API_DB_PORT: 5432
      RPG_API_DB_USER: rpg_api
      RPG_API_DB_PASS: rpg_api
      RPG_API_DB_BASE: rpg_api
      RPG_API_MONGO_HOST: rpg_api-mongo
      RPG_API_MONGO_PORT: 27017
      RPG_API_MONGO_DATABASE: rpg_api
      RPG_API_MONGO_USER: rpg_api
      RPG_API_MONGO_PASS: rpg_api

  postgres:
    image: postgres:13.8-bullseye
    hostname: rpg_api-pg
    ports:
      - "5435:5432"
    environment:
      POSTGRES_PASSWORD: "rpg_api"
      POSTGRES_USER: "rpg_api"
      POSTGRES_DB: "rpg_api"
    volumes:
    - pg-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: pg_isready -U rpg_api
      interval: 2s
      timeout: 3s
      retries: 40

  postgres-migrator:
    image: rpg_api:latest
    restart: "no"
    command: alembic upgrade head
    environment:
      RPG_API_DB_HOST: rpg_api-pg
      RPG_API_DB_PORT: 5432
      RPG_API_DB_USER: rpg_api
      RPG_API_DB_PASS: rpg_api
      RPG_API_DB_BASE: rpg_api
    depends_on:
      postgres:
        condition: service_healthy
        
  mongo:
    image: mongo:latest
    hostname: rpg_api-mongo
    container_name: mongo
    ports:
      - "27000:27017"
    environment:
      MONGO_INITDB_DATABASE: rpg_api
      MONGO_INITDB_ROOT_USERNAME: rpg_api
      MONGO_INITDB_ROOT_PASSWORD: rpg_api
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test
      interval: 2s
      timeout: 3s
      retries: 40
    command: 
      - '--logpath'
      - '/var/log/mongodb/mongod.log'
      
    restart: always

  neo4j:
    image: neo4j:latest
    hostname: rpg_api-neo4j
    container_name: neo4j
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    environment:
      NEO4J_AUTH: neo4j/password
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    healthcheck:
      test: ["CMD-SHELL", "neo4j status || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

volumes:
  pg-data:
  mongo-data:
  neo4j-data:
  neo4j-logs:
  neo4j-import:
  neo4j-plugins:
